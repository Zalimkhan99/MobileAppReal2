Функция MobileApiPOST(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	ИмяМетода = Запрос.ПараметрыURL.Получить("ИмяМетода");
	ТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
	Обработка = Обработки.JSON_and_UnJSON_2009_11_27.Создать();
	Результат = "";
	
	Если ИмяМетода = "CheckNumber" Тогда
		Соответствие = Обработка.UnJSON(ТекстЗапроса);
		ПарНомер = Прав(Соответствие["PhoneNumber"], 10);
		Номер = ?(СтрДлина(ПарНомер)=10,ПарНомер,Неопределено);
		//Номер = "8" + Номер;
		Если Номер <> Неопределено Тогда
			Результат = НайтиКлиентаПоНомеруТелефона(Номер);
			Если Результат Тогда
			Иначе
				Ответ.КодСостояния = 400;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяМетода = "GetBalance" Тогда
		Соответствие = Обработка.UnJSON(ТекстЗапроса);
		ПарНомер = Прав(Соответствие["PhoneNumber"], 10);
		Номер = ?(СтрДлина(ПарНомер)=10,ПарНомер,Неопределено);
		//Номер = "8" + Номер;
		Если Номер <> Неопределено Тогда
			Результат = ПолучитьБалансПоНомеруТелефону(Номер);
			Если Не Результат = Неопределено Тогда
			Иначе                                  
				Результат = "0";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяМетода = "GetData" Тогда
		Соответствие = Обработка.UnJSON(ТекстЗапроса);
		ПарНомер = Прав(Соответствие["PhoneNumber"], 10);
		Код = Прав(Соответствие["Code"], 4);
		Номер = ?(СтрДлина(ПарНомер)=10,ПарНомер,Неопределено);
		//Номер = "8" + Номер;
		//Результат = НачалоДня(ТекущаяДата());
		Если Номер <> Неопределено Тогда
			Если ПроверитьКодПодтверждения(Номер, Код) Тогда
				Результат = ПолучитьДанныеКлиентаПоНомеруТелефона(Номер);
				Если Не Результат = Неопределено Тогда
					Результат = Обработка.JSON(Результат);
				Иначе
					Результат = "Not found card";
				КонецЕсли
			Иначе
				Ответ.КодСостояния = 400;
				Результат = "Error: Don't find code.";
			КонецЕсли;
		Иначе
			Ответ.КодСостояния = 400;
			Результат = "Error: Can't read phone number!";
		КонецЕсли;
	ИначеЕсли ИмяМетода = "CreateCard" Тогда
		Соответствие = Обработка.UnJSON(ТекстЗапроса);
		ПарНомер = Прав(Соответствие["PhoneNumber"], 10);
		Номер = ?(СтрДлина(ПарНомер)=10,ПарНомер,Неопределено);
		Имя = Соответствие["Name"];
		Фамилия = Соответствие["SurName"];
		ДатаРождения = Соответствие["Birthday"];
		Пол = Соответствие["Gender"];
		//Номер = "8" + Номер;
		//Результат = НачалоДня(ТекущаяДата());
		Если Номер <> Неопределено Тогда
			НомерКарты = ПолучитьНовыйНомерКарты();
			Результат = СоздатьКартуПокупателя(НомерКарты, Номер, Имя, Фамилия, ДатаРождения, Пол);
			Результат = Обработка.JSON(Результат);	
		Иначе
			Ответ.КодСостояния = 400;
			Результат = "Error: Can't read phone number!";
		КонецЕсли;
	ИначеЕсли ИмяМетода = "ChangeData" Тогда
		Соответствие = Обработка.UnJSON(ТекстЗапроса);
		ПарНомер = Прав(Соответствие["PhoneNumber"], 10);
		Номер = ?(СтрДлина(ПарНомер)=10,ПарНомер,Неопределено);
		Имя = Соответствие["Name"];
		Фамилия = Соответствие["SurName"];
		ДатаРождения = Соответствие["Birthday"];
		Пол = Соответствие["Gender"];
		//Номер = "8" + Номер;
		//Результат = НачалоДня(ТекущаяДата());
		Если Номер <> Неопределено Тогда
			НомерКарты = ПолучитьНовыйНомерКарты();
			Результат = ИзменитьДанныеПокупателя(НомерКарты, Номер, Имя, Фамилия, ДатаРождения, Пол);
			Если Результат Тогда
				Результат = "OK";
			Иначе
				Результат = "Error: Can't change data!";
				Ответ.КодСостояния = 400;
			КонецЕсли;	
		Иначе
			Ответ.КодСостояния = 400;
			Результат = "Error: Can't read phone number!";
		КонецЕсли;
	ИначеЕсли ИмяМетода = "SendCode" Тогда 
		Соответствие = Обработка.UnJSON(ТекстЗапроса);
		ПарНомер = Прав(Соответствие["PhoneNumber"], 10);
		Номер = ?(СтрДлина(ПарНомер)=10,ПарНомер,Неопределено);
		//Номер = "8" + Номер;
		Если Номер <> Неопределено Тогда
			Код = ОтправитьКодПодтверждения(Номер);
			СохранитьКодПодтверждения(Номер,Код);
			Результат = "OK";
		Иначе
			Ответ.КодСостояния = 400;
			Результат = "Error: Can't read phone number!";
		КонецЕсли;
	ИначеЕсли ИмяМетода = "SendToken" Тогда 
		Соответствие = Обработка.UnJSON(ТекстЗапроса);
		ПарНомер = Прав(Соответствие["PhoneNumber"], 10);
		Токен = Соответствие["Token"];
		Номер = ?(СтрДлина(ПарНомер)=10,ПарНомер,Неопределено);
		//Номер = "8" + Номер;
		Если Номер <> Неопределено Тогда
			ЗаписатьТокенУстройства(Номер, Токен);
			Результат = "OK";
		Иначе
			Ответ.КодСостояния = 400;
			Результат = "Error: Can't read phone number!";
		КонецЕсли;
	ИначеЕсли ИмяМетода = "GetNotificationsPOST" Тогда
		Соответствие = Обработка.UnJSON(ТекстЗапроса);
		ПарНомер = Прав(Соответствие["PhoneNumber"], 10);
		Дата = Соответствие["Date"];
		Номер = ?(СтрДлина(ПарНомер)=10,ПарНомер,Неопределено);
		ДатаT = Неопределено;
		Попытка
			Массив = РазложитьСтрокуВМассивПодстрок(Дата," ");
			
			МассивДата = РазложитьСтрокуВМассивПодстрок(Массив[0],".");
			
			МассивВремя = РазложитьСтрокуВМассивПодстрок(Массив[1],":");
			
			ДатаT = Дата(МассивДата[2],МассивДата[1],МассивДата[0], МассивВремя[0], МассивВремя[1], МассивВремя[2]);
		Исключение
			МассивДата = РазложитьСтрокуВМассивПодстрок(Дата,".");
			Если МассивДата.Количество() = 3 Тогда
				ДатаT = Дата(МассивДата[2],МассивДата[1],МассивДата[0]);
			КонецЕсли;
		КонецПопытки;
		
		//Результат = Формат(ДатаT, "ДФ='dd.MM.yyyy hh:mm:ss'; ДЛФ=DT; ДП=-") + " : " + Номер;
		
		Если ДатаT <> Неопределено И Номер <> Неопределено Тогда
			Результат = ПолучитьУведомленияPost(Номер, ДатаT);
			Результат.Вставить("LoadData", Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ЧЧ:мм:сс'; ДП='01.01.0001 00:00:00'"));
		
			Обработка = Обработки.JSON_and_UnJSON_2009_11_27.Создать();
			Результат = Обработка.JSON(Результат);
			
		Иначе
			Ответ.КодСостояния = 400;
			Результат = "Error: Incorrected date!";
		КонецЕсли;	
	Иначе 
		Ответ.КодСостояния = 405;
		Результат = "Don't find method [" + ИмяМетода + "]";
	КонецЕсли;
	
	Ответ.УстановитьТелоИзСтроки(Результат,КодировкаТекста.UTF8);	
	Ответ.Заголовки.Вставить("Content-Type","text/html; charset=utf-8");
	Возврат Ответ;
КонецФункции

Функция MobileApiGET(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИмяМетода = Запрос.ПараметрыURL.Получить("ИмяМетода");
	 
	Результат = "";
	
	Если ИмяМетода = "GetAdvertisingCampains" Тогда
		//ПарНомер = Прав(Запрос.ПараметрыЗапроса.Получить("number"), 10);
		     
		Результат = ПолучитьАкции(); 
		
		Обработка = Обработки.JSON_and_UnJSON_2009_11_27.Создать();
		Результат = Обработка.JSON(Результат);
	ИначеЕсли ИмяМетода = "GetNotifications" Тогда
		Дата = Запрос.ПараметрыЗапроса.Получить("date");
		ДатаT = Неопределено;
		Попытка
			Массив = РазложитьСтрокуВМассивПодстрок(Дата," ");
			
			МассивДата = РазложитьСтрокуВМассивПодстрок(Массив[0],".");
			
			МассивВремя = РазложитьСтрокуВМассивПодстрок(Массив[1],":");
			
			ДатаT = Дата(МассивДата[2],МассивДата[1],МассивДата[0], МассивВремя[0], МассивВремя[1], МассивВремя[2]);
		Исключение
			МассивДата = РазложитьСтрокуВМассивПодстрок(Дата,".");
			Если МассивДата.Количество() = 3 Тогда
				ДатаT = Дата(МассивДата[2],МассивДата[1],МассивДата[0]);
			КонецЕсли;
		КонецПопытки;
		
		Если ДатаT <> Неопределено Тогда
			Результат = ПолучитьУведомления(ДатаT);
			Результат.Вставить("LoadData", Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ЧЧ:мм:сс'; ДП='01.01.0001 00:00:00'"));
		
			Обработка = Обработки.JSON_and_UnJSON_2009_11_27.Создать();
			Результат = Обработка.JSON(Результат);
			
		Иначе
			Ответ.КодСостояния = 400;
			Результат = "Error: Incorrected date!";
		КонецЕсли;
		
	Иначе 
		Ответ.КодСостояния = 405;
		Результат = "Отсутствует Метод " + ИмяМетода;
	КонецЕсли;
	
	Ответ.УстановитьТелоИзСтроки(Результат,КодировкаТекста.UTF8);	
	Ответ.Заголовки.Вставить("Content-Type","text/html; charset=utf-8");
	Возврат Ответ; 
КонецФункции

Функция ЗаписатьТокенУстройства(НомерТелефона, Токен)
	МЗ = РегистрыСведений.ТокеныУстройствДляУведомлений.СоздатьМенеджерЗаписи();
	МЗ.НомерТелефона = НомерТелефона;
	МЗ.Токен = Токен;
	МЗ.Записать(Истина);
КонецФункции

Функция ПолучитьУведомления(Дата)
	Соответствие = Новый Соответствие;
	Массив = Новый Массив;
	Соответствие.Вставить("NotificationList", Массив);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УведомленияДляПриложений.Заголовок,
	               |	УведомленияДляПриложений.Уведомление,
	               |	УведомленияДляПриложений.URL,
	               |	УведомленияДляПриложений.Ссылка
	               |ИЗ
	               |	Документ.УведомленияДляПриложений КАК УведомленияДляПриложений
	               |ГДЕ
	               |	УведомленияДляПриложений.Проведен = ИСТИНА
	               |	И УведомленияДляПриложений.Дата > &Дата
	               |	И ВЫБОР
	               |			КОГДА УведомленияДляПриложений.Отложенное
	               |				ТОГДА УведомленияДляПриложений.ДатаОтложения > &ТекущаяДата
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ";
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Пусто = Запрос.Выполнить().Пустой();
	Если Не Пусто Тогда
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			С = Новый Соответствие;
			С.Вставить("Title", Результат.Заголовок);
			С.Вставить("Text", Результат.Уведомление);
			С.Вставить("URL", Результат.URL);
			С.Вставить("GUID", Результат.Ссылка.УникальныйИдентификатор());
			Массив.Добавить(С);
		КонецЦикла;
	Иначе
	КонецЕсли;
	Возврат Соответствие;
КонецФункции

Функция ПолучитьУведомленияPost(НомерТелефона, Дата)
	Соответствие = Новый Соответствие;
	Массив = Новый Массив;
	Соответствие.Вставить("NotificationList", Массив);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВЫБОР
	               |		КОГДА ДанныеУведомлений.Ссылка ЕСТЬ NULL
	               |			ТОГДА Уведомления.Ссылка
	               |		ИНАЧЕ ДанныеУведомлений.Ссылка
	               |	КОНЕЦ КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА ДанныеУведомлений.URL ЕСТЬ NULL
	               |			ТОГДА Уведомления.URL
	               |		ИНАЧЕ ДанныеУведомлений.URL
	               |	КОНЕЦ КАК URL,
	               |	ВЫБОР
	               |		КОГДА ДанныеУведомлений.Заголовок ЕСТЬ NULL
	               |			ТОГДА Уведомления.Заголовок
	               |		ИНАЧЕ ДанныеУведомлений.Заголовок
	               |	КОНЕЦ КАК Заголовок,
	               |	ВЫБОР
	               |		КОГДА ДанныеУведомлений.Уведомление ЕСТЬ NULL
	               |			ТОГДА Уведомления.Уведомление
	               |		ИНАЧЕ ДанныеУведомлений.Уведомление
	               |	КОНЕЦ КАК Уведомление
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		УведомленияДляПриложений.Ссылка КАК Ссылка,
	               |		УведомленияДляПриложений.URL КАК URL,
	               |		УведомленияДляПриложений.Заголовок КАК Заголовок,
	               |		УведомленияДляПриложений.Уведомление КАК Уведомление
	               |	ИЗ
	               |		Документ.УведомленияДляПриложений КАК УведомленияДляПриложений
	               |	ГДЕ
	               |		ВЫБОР
	               |				КОГДА УведомленияДляПриложений.Ссылка.Отложенное
	               |					ТОГДА УведомленияДляПриложений.ДатаОтложения > &ТекущаяДата
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ
	               |		И УведомленияДляПриложений.Ссылка.Дата > &Дата
	               |		И УведомленияДляПриложений.Ссылка.Проведен = ИСТИНА
	               |		И НЕ УведомленияДляПриложений.НеОбщее) КАК Уведомления
	               |		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ДанныеФизЛиц.Поле3 КАК НомерТелефона,
	               |			КартыДляРасслки.Ссылка КАК Ссылка,
	               |			КартыДляРасслки.URL КАК URL,
	               |			КартыДляРасслки.Уведомление КАК Уведомление,
	               |			КартыДляРасслки.Заголовок КАК Заголовок,
	               |			КартыДляРасслки.НеОбщее КАК НеОбщее
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				УведомленияДляПриложенийКартыДляРассылки.ИнформационнаяКарта КАК ИнформационнаяКарта,
	               |				УведомленияДляПриложенийКартыДляРассылки.Ссылка КАК Ссылка,
	               |				УведомленияДляПриложенийКартыДляРассылки.Ссылка.URL КАК URL,
	               |				УведомленияДляПриложенийКартыДляРассылки.Ссылка.Уведомление КАК Уведомление,
	               |				УведомленияДляПриложенийКартыДляРассылки.Ссылка.Заголовок КАК Заголовок,
	               |				УведомленияДляПриложенийКартыДляРассылки.Ссылка.НеОбщее КАК НеОбщее
	               |			ИЗ
	               |				Документ.УведомленияДляПриложений.КартыДляРассылки КАК УведомленияДляПриложенийКартыДляРассылки
	               |			ГДЕ
	               |				ВЫБОР
	               |						КОГДА УведомленияДляПриложенийКартыДляРассылки.Ссылка.Отложенное
	               |							ТОГДА УведомленияДляПриложенийКартыДляРассылки.Ссылка.ДатаОтложения > &ТекущаяДата
	               |						ИНАЧЕ ИСТИНА
	               |					КОНЕЦ
	               |				И УведомленияДляПриложенийКартыДляРассылки.Ссылка.Дата > &Дата
	               |				И УведомленияДляПриложенийКартыДляРассылки.Ссылка.Проведен = ИСТИНА
	               |				И УведомленияДляПриложенийКартыДляРассылки.Ссылка.НеОбщее) КАК КартыДляРасслки
	               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |					ФизическиеЛица.Ссылка КАК Ссылка,
	               |					КонтактнаяИнформация.Поле3 КАК Поле3
	               |				ИЗ
	               |					РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |						ПО КонтактнаяИнформация.Объект = ФизическиеЛица.Ссылка
	               |				ГДЕ
	               |					КонтактнаяИнформация.Тип = &Тип) КАК ДанныеФизЛиц
	               |				ПО (ВЫБОР
	               |						КОГДА КартыДляРасслки.НеОбщее
	               |							ТОГДА КартыДляРасслки.ИнформационнаяКарта.ФизЛицо = ДанныеФизЛиц.Ссылка
	               |						ИНАЧЕ ИСТИНА
	               |					КОНЕЦ)
	               |		ГДЕ
	               |			ПОДСТРОКА(ДанныеФизЛиц.Поле3, 2, 10) ПОДОБНО &НомерТелефона) КАК ДанныеУведомлений
	               |		ПО Уведомления.Ссылка = ДанныеУведомлений.Ссылка
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА &ПериодДопускается
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ";
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НомерТелефона", """%" + НомерТелефона + "%""");
	Запрос.УстановитьПараметр("ПериодДопускается", Дата - (ТекущаяДата() - 2 * 24*3600) >= 0);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Пусто = Запрос.Выполнить().Пустой();
	Если Не Пусто Тогда
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			С = Новый Соответствие;
			С.Вставить("Title", Результат.Заголовок);
			С.Вставить("Text", Результат.Уведомление);
			С.Вставить("URL", Результат.URL);
			С.Вставить("GUID", Результат.Ссылка.УникальныйИдентификатор());
			Массив.Добавить(С);
		КонецЦикла;
	Иначе
	КонецЕсли;
	Возврат Соответствие;
КонецФункции

Функция ПолучитьАкции()
	Соответствие = Новый Соответствие;
	Массив = Новый Массив;
	Соответствие.Вставить("AdvertisingCampainsList", Массив);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АкцииДляПриложенияСрезПоследних.Текст,
	               |	АкцииДляПриложенияСрезПоследних.URL
	               |ИЗ
	               |	РегистрСведений.АкцииДляПриложения.СрезПоследних КАК АкцииДляПриложенияСрезПоследних
	               |ГДЕ
	               |	АкцииДляПриложенияСрезПоследних.ДатаНачала <= &ТекущаяДата
	               |	И (АкцииДляПриложенияСрезПоследних.ДатаКонца >= &ТекущаяДата
	               |			ИЛИ АкцииДляПриложенияСрезПоследних.ДатаКонца = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	АкцииДляПриложенияСрезПоследних.ДатаНачала";
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Пусто = Запрос.Выполнить().Пустой();
	Если Не Пусто Тогда
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			СоответствиеДанные = Новый Соответствие;
			СоответствиеДанные.Вставить("Text", Результат.Текст);
			СоответствиеДанные.Вставить("URL", Результат.URL);
			Массив.Добавить(СоответствиеДанные);
		КонецЦикла;
	Иначе
	КонецЕсли;
	
	Возврат Соответствие;
КонецФункции

Функция ПолучитьНовыйНомерКарты()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ИнформационныеКарты.КодКарты КАК КодКарты
	               |ИЗ
	               |	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	               |ГДЕ
	               |	ИнформационныеКарты.ТипКарты = &ТипКарты
	               |	И ИнформационныеКарты.ВидДисконтнойКарты = &ВидДисконтнойКарты
	               |	И ИнформационныеКарты.ТипШтрихКода = &ТипШтрихКода
	               |	И ПОДСТРОКА(ИнформационныеКарты.КодКарты, 1, 1) = ""5""
	               |	И ПОДСТРОКА(ИнформационныеКарты.КодКарты, 8, 1) <> """"
	               |	И ПОДСТРОКА(ИнформационныеКарты.КодКарты, 9, 1) = """"
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КодКарты УБЫВ";
	Запрос.УстановитьПараметр("ТипКарты", Перечисления.ТипыИнформационныхКарт.Дисконтная);
	Запрос.УстановитьПараметр("ВидДисконтнойКарты",Справочники.ВидыДисконтныхКарт.НайтиПоКоду("РЛ0000004"));
	Запрос.УстановитьПараметр("ТипШтрихКода", ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8);
	Пусто = Запрос.Выполнить().Пустой();
	Номер = Неопределено;
	Если Не Пусто Тогда
	  Результат = Запрос.Выполнить().Выбрать();
	  Пока Результат.Следующий() Цикл
		  Номер = Результат.КодКарты;
		  Номер = СформироватьEAN8(Формат((Число(Лев(Номер, СтрДлина(Номер) - 1)) + 1), "ЧДЦ=; ЧН=0; ЧГ="));
	  КонецЦикла;
  	Иначе
	  Номер = "5000000";
	КонецЕсли;
	Возврат Номер;
КонецФункции

функция СформироватьEAN8(Число)
	МассивЧисел = Новый Массив;
	Для Т = 0 По СтрДлина(Число) - 1 Цикл
		Ч = Лев(Прав(Число, СтрДлина(Число) - Т), 1);
		МассивЧисел.Добавить(Число(Ч));	
	КонецЦикла;
	Четные = 0;
	Для Т = 0 По МассивЧисел.Количество()/2 Цикл
		Если Т*2 < МассивЧисел.Количество() Тогда 
			Четные = Четные + МассивЧисел[Т*2];
		КонецЕсли
	КонецЦикла;
	Четные = Четные * 3;
	НеЧетные = 0;
	Для Т = 0 По МассивЧисел.Количество()/2 Цикл
		Если Т*2 + 1 < МассивЧисел.Количество() Тогда 
			НеЧетные = НеЧетные + МассивЧисел[Т*2 + 1];	
		КонецЕсли
	КонецЦикла;
	Результат = Четные + НеЧетные;
	Результат = 10 - Число(Прав(Формат(Результат, "ЧДЦ=; ЧН=0; ЧГ="), 1));
	Возврат Число + Результат;
КонецФункции

Функция ПроверитьКодПодтверждения(НомерТелефона, Код)
	НомерТелефона = Прав(НомерТелефона, 10);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КодПодтвержденияПриложения.НомерТелефона
	               |ИЗ
	               |	РегистрСведений.КодПодтвержденияПриложения КАК КодПодтвержденияПриложения
	               |ГДЕ
	               |	КодПодтвержденияПриложения.НомерТелефона ПОДОБНО &НомерТелефона
	               |	И КодПодтвержденияПриложения.Код = &Код
	               |	И КодПодтвержденияПриложения.Дата = &Дата";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НомерТелефона", """%" + НомерТелефона + "%""");
	Запрос.УстановитьПараметр("Код", Код);
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата()));
	Пусто = Запрос.Выполнить().Пустой();
	Если Не Пусто Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции

Функция ОтправитьКодПодтверждения(НомерТелефона)
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	СлучайноеЧисло = ГСЧ.СлучайноеЧисло(10000, 19999);
	
	Код = Прав(Строка(Формат(СлучайноеЧисло,"ЧДЦ=; ЧН=0; ЧГ=")), 4);
	
	Обработка = Обработки.ОтправкаСМС.Создать();
	Обработка.ОтправитьСМС(НомерТелефона, "Код: " + Код,,,ТекущаяДата());
	
	Возврат Код;
	
КонецФункции

Функция СохранитьКодПодтверждения(НомерТелефона,Код)
	МЗ = РегистрыСведений.КодПодтвержденияПриложения.СоздатьМенеджерЗаписи();
	МЗ.НомерТелефона = НомерТелефона;
	МЗ.Дата = ТекущаяДата();
	МЗ.Код = Код;
	МЗ.Записать(Истина);	
КонецФункции


Функция НайтиКлиентаПоНомеруТелефона(НомерТелефона) Экспорт
	НомерТелефона = Прав(НомерТелефона, 10);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ФизическиеЛица.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |		ПО ФизическиеЛица.Ссылка = КонтактнаяИнформация.Объект
	               |ГДЕ
	               |	КонтактнаяИнформация.Поле3 ПОДОБНО &НомерТелефона
	               |	И КонтактнаяИнформация.Тип = &Тип";
				   
	//прос.УстановитьПараметр("НомерТелефона", НомерТелефона);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("ТипEmail", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ВидДК", Справочники.ВидыДисконтныхКарт.НайтиПоКоду("РЛ0000004"));
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НомерТелефона", """%" + НомерТелефона + "%""");	
	
	Пусто = Запрос.Выполнить().Пустой();
	
	Если Не Пусто Тогда
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			Возврат Истина;
		КонецЦикла;
	Иначе 
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Функция ПолучитьДанныеКлиентаПоНомеруТелефона(НомерТелефона) Экспорт
	НомерТелефона = Прав(НомерТелефона, 10);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВложенныйЗапрос1.Ссылка КАК ДК,
	               |	ВложенныйЗапрос.Фамилия,
	               |	ВложенныйЗапрос.Имя,
	               |	ВложенныйЗапрос.Отчество,
	               |	ВложенныйЗапрос.Email,
	               |	ВложенныйЗапрос.ДатаРождения,
	               |	ВложенныйЗапрос.Пол,
	               |	ВложенныйЗапрос1.КодКарты,
	               |	ВложенныйЗапрос1.Ссылка.ВиртуальныйНомерКарты
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ФизическиеЛица.Ссылка КАК Ссылка,
	               |		ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
	               |		ФИОФизЛицСрезПоследних.Имя КАК Имя,
	               |		ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
	               |		ВложенныйЗапрос.Представление КАК Email,
	               |		ФизическиеЛица.ДатаРождения КАК ДатаРождения,
	               |		ФизическиеЛица.Пол КАК Пол
	               |	ИЗ
	               |		Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |			ПО ФизическиеЛица.Ссылка = КонтактнаяИнформация.Объект
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ТекущаяДата, ) КАК ФИОФизЛицСрезПоследних
	               |			ПО ФизическиеЛица.Ссылка = ФИОФизЛицСрезПоследних.ФизЛицо
	               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				КонтактнаяИнформация.Объект КАК Объект,
	               |				КонтактнаяИнформация.Представление КАК Представление
	               |			ИЗ
	               |				РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |			ГДЕ
	               |				КонтактнаяИнформация.Тип = &ТипEmail) КАК ВложенныйЗапрос
	               |			ПО ФизическиеЛица.Ссылка = ВложенныйЗапрос.Объект
	               |	ГДЕ
	               |		КонтактнаяИнформация.Поле3 ПОДОБНО &НомерТелефона
	               |		И КонтактнаяИнформация.Тип = &Тип) КАК ВложенныйЗапрос
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ИнформационныеКарты.Ссылка КАК Ссылка,
	               |			ИнформационныеКарты.ФизЛицо КАК ФизЛицо,
	               |			ИнформационныеКарты.КодКарты КАК КодКарты
	               |		ИЗ
	               |			Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	               |		ГДЕ
	               |			ИнформационныеКарты.ВидДисконтнойКарты = &ВидДК) КАК ВложенныйЗапрос1
	               |		ПО ВложенныйЗапрос.Ссылка = ВложенныйЗапрос1.ФизЛицо
	               |ГДЕ
	               |	НЕ ВложенныйЗапрос1.Ссылка.ВиртуальныйНомерКарты = """"";
				   
	//прос.УстановитьПараметр("НомерТелефона", НомерТелефона);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("ТипEmail", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ВидДК", Справочники.ВидыДисконтныхКарт.НайтиПоКоду("РЛ0000004"));
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НомерТелефона", """%" + НомерТелефона + "%""");
	Результат = Запрос.Выполнить();	
	
	Структура = Новый Структура;
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Соответствие = Новый Соответствие;
			Соответствие.Вставить("PhoneNumber", Прав(НомерТелефона, 10));
			Соответствие.Вставить("CardNumber", Выборка.КодКарты);
			Соответствие.Вставить("SurName", Выборка.Фамилия);
			Соответствие.Вставить("Name", Выборка.Имя);
			//Соответствие.Вставить("Email", Выборка.Email);
			Соответствие.Вставить("Birthday", Формат(Выборка.ДатаРождения, "ДФ=dd.MM.yyyy"));
			Если Выборка.Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
				Соответствие.Вставить("Gender", "male");
			ИначеЕсли Выборка.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
				Соответствие.Вставить("Gender", "female");
			КонецЕсли;
			ФизическаяКарта = Выборка.ДК.Ссылка;
			Балы = Формат(РаботаСПокупателями.КоличествоДоступныхБаллов(ФизическаяКарта), "ЧДЦ=; ЧН=; ЧГ=");
			Соответствие.Вставить("BonusPoints", Балы);
			Возврат Соответствие;
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 	
КонецФункции

Функция ПолучитьБалансПоНомеруТелефону(НомерТелефона) Экспорт
	НомерТелефона = Прав(НомерТелефона, 10);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВложенныйЗапрос1.Ссылка КАК ДК
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ФизическиеЛица.Ссылка КАК Ссылка
	               |	ИЗ
	               |		Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |			ПО ФизическиеЛица.Ссылка = КонтактнаяИнформация.Объект
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	               |			ПО ФизическиеЛица.Ссылка = ФИОФизЛиц.ФизЛицо
	               |	ГДЕ
	               |		КонтактнаяИнформация.Поле3 ПОДОБНО &НомерТелефона
	               |		И КонтактнаяИнформация.Тип = &Тип) КАК ВложенныйЗапрос
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ИнформационныеКарты.Ссылка КАК Ссылка,
	               |			ИнформационныеКарты.ФизЛицо КАК ФизЛицо
	               |		ИЗ
	               |			Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	               |		ГДЕ
	               |			ИнформационныеКарты.ВидДисконтнойКарты = &ВидДК) КАК ВложенныйЗапрос1
	               |		ПО ВложенныйЗапрос.Ссылка = ВложенныйЗапрос1.ФизЛицо";
				   
	//прос.УстановитьПараметр("НомерТелефона", НомерТелефона);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("ВидДК", Справочники.ВидыДисконтныхКарт.НайтиПоКоду("РЛ0000004"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НомерТелефона", """%" + НомерТелефона + "%""");
	Результат = Запрос.Выполнить();	
	
	Структура = Новый Структура;
	
	Балы = 0;
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ФизическаяКарта = Выборка.ДК.Ссылка;
			Балы = РаботаСПокупателями.КоличествоДоступныхБаллов(ФизическаяКарта);
			Возврат Балы;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция СоздатьКартуПокупателя(НомерКарты, НомерТелефона, Имя, Фамилия, ДатаРождения, Пол) Экспорт
		
	ТипШтрихКода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN8;
	
	Массив = РазложитьСтрокуВМассивПодстрок(ДатаРождения,".");
	
	НомерКарты = Строка(НомерКарты);
	
	Если Массив.Количество() = 3 Тогда
		ДатаРождения = Дата(Массив[2],Массив[1],Массив[0]);
	КонецЕсли;
	
	НомерТелефона = Прав(НомерТелефона, 10);
		
	Если ЗначениеЗаполнено(Пол) Тогда
		Если Пол = "male" Тогда
			Пол = Перечисления.ПолФизическихЛиц.Мужской;
		ИначеЕсли Пол = "female" Тогда 
			Пол = Перечисления.ПолФизическихЛиц.Женский;
		Иначе

		КонецЕсли;
	КонецЕсли;
	
	ФизическаяКарта = Неопределено;
	КартаНайдена = Ложь;
	ФизЛицо = Неопределено;
	ЗаписыватьШтрихкод = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВложенныйЗапрос.Ссылка КАК ФизЛицо,
	               |	ВложенныйЗапрос1.Ссылка КАК ДК
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ФизическиеЛица.Ссылка КАК Ссылка
	               |	ИЗ
	               |		Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |			ПО ФизическиеЛица.Ссылка = КонтактнаяИнформация.Объект
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	               |			ПО ФизическиеЛица.Ссылка = ФИОФизЛиц.ФизЛицо
	               |	ГДЕ
	               |		КонтактнаяИнформация.Поле3 ПОДОБНО &НомерТелефона
	               |		И КонтактнаяИнформация.Тип = &Тип) КАК ВложенныйЗапрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ИнформационныеКарты.Ссылка КАК Ссылка,
	               |			ИнформационныеКарты.ФизЛицо КАК ФизЛицо
	               |		ИЗ
	               |			Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	               |		ГДЕ
	               |			ИнформационныеКарты.ВидДисконтнойКарты = &ВидДК) КАК ВложенныйЗапрос1
	               |		ПО ВложенныйЗапрос.Ссылка = ВложенныйЗапрос1.ФизЛицо";
				   
	//прос.УстановитьПараметр("НомерТелефона", НомерТелефона);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("ВидДК", Справочники.ВидыДисконтныхКарт.НайтиПоКоду("РЛ0000004"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НомерТелефона", """%" + НомерТелефона + "%""");
	Результат = Запрос.Выполнить();	
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ДК) Тогда
				ФизическаяКарта = Выборка.ДК.Ссылка.ПолучитьОбъект();
				ЗаписыватьШтрихкод = Не ФизическаяКарта.ВиртуальныйНомерКарты = НомерКарты;
				КартаНайдена = Истина;	
			КонецЕсли;
			ФизЛицо = Выборка.ФизЛицо;
		КонецЦикла;
	Иначе
		ФизическаяКарта = Справочники.ИнформационныеКарты.СоздатьЭлемент();	
	КонецЕсли;
	
	#region ПроверкаУникальностиКарты
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнформационныеКарты.Ссылка,
	               |	Штрихкоды.ТипШтрихкода
	               |ИЗ
	               |	РегистрСведений.Штрихкоды КАК Штрихкоды
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	               |		ПО Штрихкоды.Владелец = ИнформационныеКарты.Ссылка
	               |ГДЕ
	               |	Штрихкоды.Штрихкод = &Код
	               |				И (Штрихкоды.ТипШтрихкода = &Тип0
	               |			ИЛИ Штрихкоды.ТипШтрихкода = &Тип1)";
	Запрос.УстановитьПараметр("Код", НомерКарты);
	Запрос.УстановитьПараметр("Тип0", ПланыВидовХарактеристик.ТипыШтрихкодов.Code39);
	Запрос.УстановитьПараметр("Тип1", ТипШтрихКода);
	Пусто = Запрос.Выполнить().Пустой();
	Если Не Пусто Тогда
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			Если ФизическаяКарта = Неопределено Или ФизическаяКарта.Ссылка <> Результат.Ссылка Тогда
				Объект = Результат.Ссылка.ПолучитьОбъект();
				Объект.ВиртуальныйНомерКарты = "";
				Объект.Записать();
				
				Набор = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
				Набор.Отбор.Штрихкод.Установить(НомерКарты);
				Набор.Отбор.ТипШтрихкода.Установить(Результат.ТипШтрихкода);
				Набор.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	#endregion
		
	ФизЛицо = КартыПокупателей.СозданиеСправочникаФизЛица(ФизЛицо, Фамилия, Имя
		, Неопределено, НомерТелефона, Неопределено, ДатаРождения, Пол);
		
	Если ТипЗнч(ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
	
		Если Не КартаНайдена Тогда
			
			ФизическаяКарта = Справочники.ИнформационныеКарты.СоздатьЭлемент();
			ФизическаяКарта.Наименование = НомерКарты;
			ФизическаяКарта.КодКарты = НомерКарты;
			ФизическаяКарта.Родитель = Справочники.ИнформационныеКарты.НайтиПоКоду("РЛ0185544");
			ФизическаяКарта.ВидДисконтнойКарты = Справочники.ВидыДисконтныхКарт.НайтиПоКоду("РЛ0000004");
			ФизическаяКарта.ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная;
			ФизическаяКарта.ВидКарты = Перечисления.ВидыИнформационныхКарт.Штриховая;
			ФизическаяКарта.ТипШтрихКода = ТипШтрихКода;
			ФизическаяКарта.ВладелецКарты = Справочники.Контрагенты.НайтиПоКоду("000000303");
			
			ФизическаяКарта.Записать();
			
			ФизическаяКарта.ФизЛицо = ФизЛицо;
						
		КонецЕсли;
		
		ФизическаяКарта.ВиртуальныйНомерКарты = НомерКарты;
		
		ФизическаяКарта.Записать();
				
		Если ЗаписыватьШтрихкод Тогда
			Стр = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
			Стр.Владелец = ФизическаяКарта.Ссылка;
			Стр.Штрихкод = ФизическаяКарта.ВиртуальныйНомерКарты;
			Стр.ТипШтрихкода = ТипШтрихКода;
			//Стр.ЕдиницаИзмерения = Неопределено;
			//Стр.ХарактеристикаНоменклатуры = Неопределено;
			//Стр.СерияНоменклатуры = Неопределено;
			//Стр.Качество = Неопределено;
			//Стр.УдалитьКод = Неопределено;
			//Стр.Измерение1 = Неопределено;
			Стр.Записать();
		КонецЕсли;
		
		Балы = КартыПокупателей.КоличествоДоступныхБаллов(ФизическаяКарта.Ссылка);
		
		Соответствие = Новый Соответствие;
		Соответствие.Вставить("balance", Балы);
		Соответствие.Вставить("customerId ", Строка(ФизЛицо.УникальныйИдентификатор()));
		Соответствие.Вставить("cardNumber", ФизическаяКарта.КодКарты);
		
		Возврат Соответствие;
	
	Иначе
		Соответствие = Новый Соответствие;
		Соответствие.Вставить("error", "Can't create card!");
		
		Возврат Соответствие; 
	КонецЕсли;
	
КонецФункции

Функция ИзменитьДанныеПокупателя(НомерКарты, НомерТелефона, Имя, Фамилия, ДатаРождения, Пол) Экспорт
	
	НомерКарты = Строка(НомерКарты);
	
	Отчество = Неопределено;
	//Если ЗначениеЗаполнено(Отчество) Тогда
	//	Отчество = Отчество;
	//КонецЕсли;
	
	Если ДатаРождения <> Неопределено Тогда
		Массив = РазложитьСтрокуВМассивПодстрок(ДатаРождения,".");
		Если Массив.Количество() = 3 Тогда
			ДатаРождения = Дата(Массив[2],Массив[1],Массив[0]);
		КонецЕсли;
	КонецЕсли; 	
	
	НомерТелефона = Прав(НомерТелефона, 10);
	
	АдресЭлПочты = Неопределено;
	//Если ЗначениеЗаполнено(АдресЭлПочты) Тогда
	//	АдресЭлПочты = АдресЭлПочты;
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(Пол) Тогда
		Если Пол = "male" Тогда
			Пол = Перечисления.ПолФизическихЛиц.Мужской;
		ИначеЕсли Пол = "female" Тогда 
			Пол = Перечисления.ПолФизическихЛиц.Женский;
		Иначе

		КонецЕсли;
	КонецЕсли;
	
	ФизическаяКарта = Неопределено;
	ФизЛицо = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВложенныйЗапрос.Ссылка КАК ФизЛицо,
	               |	ВложенныйЗапрос1.Ссылка КАК ДК
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ФизическиеЛица.Ссылка КАК Ссылка
	               |	ИЗ
	               |		Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |			ПО ФизическиеЛица.Ссылка = КонтактнаяИнформация.Объект
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
	               |			ПО ФизическиеЛица.Ссылка = ФИОФизЛиц.ФизЛицо
	               |	ГДЕ
	               |		КонтактнаяИнформация.Поле3 ПОДОБНО &НомерТелефона
	               |		И КонтактнаяИнформация.Тип = &Тип) КАК ВложенныйЗапрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ИнформационныеКарты.Ссылка КАК Ссылка,
	               |			ИнформационныеКарты.ФизЛицо КАК ФизЛицо
	               |		ИЗ
	               |			Справочник.ИнформационныеКарты КАК ИнформационныеКарты
	               |		ГДЕ
	               |			ИнформационныеКарты.ВидДисконтнойКарты = &ВидДК) КАК ВложенныйЗапрос1
	               |		ПО ВложенныйЗапрос.Ссылка = ВложенныйЗапрос1.ФизЛицо";
				   
	//прос.УстановитьПараметр("НомерТелефона", НомерТелефона);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("ВидДК", Справочники.ВидыДисконтныхКарт.НайтиПоКоду("РЛ0000004"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НомерТелефона", """%" + НомерТелефона + "%""");
	Результат = Запрос.Выполнить();	
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ДК) Тогда
				ФизическаяКарта = Выборка.ДК.Ссылка.ПолучитьОбъект();	
			КонецЕсли;
			ФизЛицо = Выборка.ФизЛицо;
		КонецЦикла;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Если ФизическаяКарта <> Неопределено И ФизЛицо <> Неопределено И ТипЗнч(ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Если Фамилия <> Неопределено Или Имя <> Неопределено Тогда
			
			Отчество = Неопределено;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ФИОФизЛицСрезПоследних.Отчество,
			               |	ФИОФизЛицСрезПоследних.Фамилия,
			               |	ФИОФизЛицСрезПоследних.Имя
			               |ИЗ
			               |	РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФизЛицСрезПоследних
			               |ГДЕ
			               |	ФИОФизЛицСрезПоследних.ФизЛицо = &ФизЛицо";
			Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
			Пусто = Запрос.Выполнить().Пустой();
			Если Не Пусто Тогда
			Результат = Запрос.Выполнить().Выбрать();
				Пока Результат.Следующий() Цикл
					Отчество = Результат.Отчество;
					Если Фамилия = Неопределено Тогда
						Фамилия = Результат.Фамилия;
					КонецЕсли;
					Если Имя = Неопределено Тогда
						Имя = Результат.Имя;
					КонецЕсли;
				КонецЦикла;
			Иначе
			КонецЕсли;
			
			Запись = РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи();
			Запись.Период = ТекущаяДата();
			Запись.ФизЛицо = ФизЛицо.Ссылка;
			Запись.Фамилия = Фамилия;
			Запись.Имя = Имя;
			Запись.Отчество = Отчество;
			Запись.Записать(Истина);
			
			ФизЛицоОбъект = ФизЛицо.ПолучитьОбъект();
			ФизЛицоОбъект.Наименование = Фамилия + " " + Имя + " " + Отчество;
			ФизЛицоОбъект.Записать();
		
		КонецЕсли;
		
		Если Пол <> Неопределено Или ДатаРождения <> Неопределено Тогда
			ФизЛицоОбъект = ФизЛицо.ПолучитьОбъект();
			Если ДатаРождения <> Неопределено Тогда
				ФизЛицоОбъект.ДатаРождения = ДатаРождения;
			КонецЕсли;
			Если Пол <> Неопределено Тогда
				ФизЛицоОбъект.Пол = Пол;
			КонецЕсли;
			ФизЛицоОбъект.Записать();
		КонецЕсли;
		Возврат Истина;
	Иначе
		Возврат Ложь;
 	КонецЕсли;
	
КонецФункции

//Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель) Экспорт
//	
//	Список = Новый Массив(); 
//	Длина = СтрДлина(Разделитель); 

//	Стр = СокрЛП(Стр); 
//	Поз = Найти(Стр, Разделитель); 

//	Пока 0 < Поз Цикл 
//		Список.Добавить(СтрЗаменить(СокрП(Лев(Стр, Поз-1)), """", "")); 

//		Стр = СокрЛ(Сред(Стр, Поз+Длина)); 
//		Поз = Найти(Стр, Разделитель); 
//	КонецЦикла; 

//	Список.Добавить(СтрЗаменить(Стр, """", ""));

//	Возврат Список; 
//	 
//КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
    
    МассивСтрок = Новый Массив();
    Если Разделитель = " " Тогда
        Стр = СокрЛП(Стр);
        Пока 1=1 Цикл
            Поз = Найти(Стр,Разделитель);
            Если Поз=0 Тогда
                МассивСтрок.Добавить(Стр);
                Возврат МассивСтрок;
            КонецЕсли;
            МассивСтрок.Добавить(Лев(Стр,Поз-1));
            Стр = СокрЛ(Сред(Стр,Поз));
        КонецЦикла;
    Иначе
        ДлинаРазделителя = СтрДлина(Разделитель);
        Пока 1=1 Цикл
            Поз = Найти(Стр,Разделитель);
            Если Поз=0 Тогда
                МассивСтрок.Добавить(Стр);
                Возврат МассивСтрок;
            КонецЕсли;
            МассивСтрок.Добавить(Лев(Стр,Поз-1));
            Стр = Сред(Стр,Поз+ДлинаРазделителя);
        КонецЦикла;
    КонецЕсли;
    
КонецФункции


#region Залимхан

Функция WebApiGET(Запрос)
	Токен = "tw5q9xuamids40mlfb5mejdadx7qud7b";
	ПолучитьТокен = Запрос.ПараметрыURL.Получить("token");
		
	Если Токен = ПолучитьТокен Тогда 
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
		"ВЫБРАТЬ
		|	ПаролиЛичногоКабинета.Пользователь,
		|	ПаролиЛичногоКабинета.Сотрудник,
		|	ПаролиЛичногоКабинета.Пароль
		|ИЗ
		|	РегистрСведений.ПаролиЛичногоКабинета КАК ПаролиЛичногоКабинета";
	
	РезультатЗапроса = Запрос1.Выполнить().Выбрать();

	
	
	   МассивПользователей = Новый Массив;
	   
	   Пока РезультатЗапроса.Следующий() Цикл
		Пользователи1 = Новый Структура;
		
		ПользовательСтр = "" + РезультатЗапроса.Пользователь ;
		СотрудникСтр = "" + РезультатЗапроса.Сотрудник;
		Пароль =  РезультатЗапроса.Пароль;
		
		Пользователи1.Вставить("Пользователь", ПользовательСтр);
		Пользователи1.Вставить("Сотрудник", СотрудникСтр);
		Пользователи1.Вставить("Пароль", Пароль);
		МассивПользователей.Добавить(Пользователи1);
	КонецЦикла;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, МассивПользователей);
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/JSON;  charset=utf-8");
	Ответ.Заголовки.Вставить("Access-Control-Allow-Headers", "Authorization,Content-type");
	Ответ.Заголовки.Вставить("Access-Control-Allow-Credentials", "true");
	
	Если Ложь Тогда 
		Запрос = Новый HTTPЗапрос; 
	КонецЕсли;
	
	Origin = Запрос.Заголовки.Получить("Origin");
	
	Если Origin = Неопределено Тогда
	    Ответ.Заголовки.Вставить("Access-Control-Allow-Origin", "*");
	Иначе
	    Ответ.Заголовки.Вставить("Access-Control-Allow-Origin", Origin);
	КонецЕсли;    
	
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Возврат Ответ
	
	Иначе 
		Ответ = Новый HTTPСервисОтвет(400,"Ошибка");
		Возврат Ответ;
	КонецЕсли;
КонецФункции


Функция LoginInReactAppgetUser(Запрос)
	//1. Получаем параметры с URL
	
	Логин =  Запрос.ПараметрыURL.Получить("user");
	Пароль =   Запрос.ПараметрыURL.Получить("password");
	
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	 "ВЫБРАТЬ
	 |	ПаролиЛичногоКабинета.Сотрудник.ФизЛицо.Наименование КАК Сотрудник,
	 |	ПаролиЛичногоКабинета.Пароль КАК ПарольЛЧ
	 |ИЗ
	 |	РегистрСведений.ПаролиЛичногоКабинета КАК ПаролиЛичногоКабинета
	 |ГДЕ
	 |	ПаролиЛичногоКабинета.Сотрудник.ФизЛицо.Наименование = &Логин
	 |	И ПаролиЛичногоКабинета.Пароль = &Пароль";
	Запрос1.УстановитьПараметр("Логин", Логин);
	Запрос1.УстановитьПараметр("Пароль", Пароль);

	          
	
	Результат = Запрос1.Выполнить();
	РезультатЗапроса = Результат.Выбрать();
	
	Если НЕ Результат.Пустой() Тогда
		ДанныеПользователя = Новый Структура;

	Пока РезультатЗапроса.Следующий() Цикл
		
	ЛогинСтр = ""+РезультатЗапроса.Сотрудник;
	ПарольСтр = ""+РезультатЗапроса.ПарольЛЧ;
	

	ДанныеПользователя.Вставить("Логин ", ЛогинСтр );
	ДанныеПользователя.Вставить("Пароль ", ПарольСтр);
	
	
	КонецЦикла;
//2. Сериализуем структуру пользователей в JSON

	ЗаписьJSON = Новый ЗаписьJSON;
    ЗаписьJSON.УстановитьСтроку();
    ЗаписатьJSON(ЗаписьJSON, ДанныеПользователя); 
    СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
//3. формируем ответ

    Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Accept-Charset", "utf-8");
	
    Ответ.Заголовки.Вставить("Content-type", "application/JSON;  charset=utf-8");
    Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Возврат Ответ;
	
	Иначе
		
	Ответ = Новый HTTPСервисОтвет(500,"error1");
	Ответ.Заголовки.Вставить("Accept-Charset", "utf-8");

	Ответ.Заголовки.Вставить("Content-type", "application/JSON;  charset=utf-8");
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Возврат Ответ;
	КонецЕсли;

КонецФункции


Функция GetInfoUserReactAppGetInfoUser(Запрос)
	Логин =   Запрос.ПараметрыURL.Получить("user");
		
	
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
		"ВЫБРАТЬ
		|	ШтрафыСотрудниковОстатки.Сотрудник.ТабельныйНомер КАК ТабельныйНомер,
		|	ШтрафыСотрудниковОстатки.Сотрудник.ТекущаяДолжность КАК ТекущаяДолжность,
		|	ШтрафыСотрудниковОстатки.Сотрудник.ТекущееПодразделение КАК Подразделение,
		|	ШтрафыСотрудниковОстатки.ШтрафОстаток КАК ШтрафОстаток,
		|	ШтрафыСотрудниковОстатки.Сотрудник.ФизЛицо.Наименование КАК ФизЛицо
		|ИЗ
		|	РегистрНакопления.ШтрафыСотрудников.Остатки КАК ШтрафыСотрудниковОстатки
		|ГДЕ
		|	ШтрафыСотрудниковОстатки.Сотрудник.ФизЛицо.Наименование = &Логин";
	
		Запрос1.УстановитьПараметр("Логин", Логин);
		
		Результат = Запрос1.Выполнить();
		РезультатЗапроса = Результат.Выбрать();
	//	Если Результат.Пустой()Тогда 
	//		 Ответ = Новый HTTPСервисОтвет(200);
	//Ответ.Заголовки.Вставить("Accept-Charset", "utf-8");
	//	КонецЕсли;

		МассивПользователей = Новый Массив;
		
		Пока РезультатЗапроса.Следующий() Цикл
		ДанныеПользователя = Новый Структура;
		
		ЛогинСтр = ""+РезультатЗапроса.ФизЛицо;
		КоличествоШтрафовСтр = ""+РезультатЗапроса.ШтрафОстаток;
		ДолжностьСтр = "" + РезультатЗапроса.ТекущаяДолжность;
		ПодразделениеСтр = "" + РезультатЗапроса.Подразделение;
		ТабельныйНомерСтр = "" + РезультатЗапроса.ТабельныйНомер;
		
		ДанныеПользователя.Вставить("Login", ЛогинСтр);
		ДанныеПользователя.Вставить("Warning", КоличествоШтрафовСтр);
		ДанныеПользователя.Вставить("Position", ДолжностьСтр);
		ДанныеПользователя.Вставить("Subdivision", ПодразделениеСтр);
		ДанныеПользователя.Вставить("PersonnelNumber", ТабельныйНомерСтр);

		МассивПользователей.Добавить(ДанныеПользователя);
	КонецЦикла;
	
		СтруктураПользователей = Новый Структура;
		СтруктураПользователей.Вставить("DataUser",МассивПользователей);
	 //2. Сериализуем структуру пользователей в JSON

	ЗаписьJSON = Новый ЗаписьJSON;
    ЗаписьJSON.УстановитьСтроку();
    ЗаписатьJSON(ЗаписьJSON, СтруктураПользователей); 
    СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	    //3. формируем ответ
    Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Accept-Charset", "utf-8");

    Ответ.Заголовки.Вставить("Content-type", "application/JSON;  charset=utf-8");
    Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);

	  Возврат Ответ;
	
КонецФункции


Функция GetScheduleUsergetSchedule(Запрос)
	Логин =   Запрос.ПараметрыURL.Получить("user");
	//1. Получаем данные с Регистра накопления
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
		"ВЫБРАТЬ
		|	ТабельУчетаРабочегоВремени.Период КАК Период,
		|	ТабельУчетаРабочегоВремени.Сотрудник КАК Сотрудник,
		|	ТабельУчетаРабочегоВремени.НачалоРаботы КАК НачалоРаботы,
		|	ТабельУчетаРабочегоВремени.КонецРаботы КАК КонецРаботы,
		|	ТабельУчетаРабочегоВремени.ВремяПрихода КАК ВремяПрихода,
		|	ТабельУчетаРабочегоВремени.ВремяУхода КАК ВремяУхода,
		|	ТабельУчетаРабочегоВремени.ОтработанноеВремя КАК ОтработанноеВремя,
		|	ТабельУчетаРабочегоВремени.Опоздание КАК Опоздание,
		|	ТабельУчетаРабочегоВремени.УходРаньшеВремени КАК УходРаньшеВремени,
		|	ТабельУчетаРабочегоВремени.Период КАК Период1,
		|	ТабельУчетаРабочегоВремениОбороты.ФактОпозданияОборот КАК ФактпозданияОборот
		|ИЗ
		|	РегистрНакопления.ТабельУчетаРабочегоВремени КАК ТабельУчетаРабочегоВремени,
		|	РегистрНакопления.ТабельУчетаРабочегоВремени.Обороты КАК ТабельУчетаРабочегоВремениОбороты
		|ГДЕ
		|	ТабельУчетаРабочегоВремени.Сотрудник.ФизЛицо.Наименование = &Логин
		|	И ТабельУчетаРабочегоВремени.Период МЕЖДУ &НачалоМесяца И &КонецМесяца";
	
	Запрос1.УстановитьПараметр("Логин", Логин);
	Запрос1.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ТекущаяДата()));
	Запрос1.УстановитьПараметр("КонецМесяца", КонецМесяца(ТекущаяДата()));

	Результат = Запрос1.Выполнить();
	РезультатЗапроса = Результат.Выбрать();	
	
	//2. формируем массив клиентов для отправки
	МассивГрафикРаботы = Новый Массив;
	Пока   РезультатЗапроса.Следующий() Цикл
		ГрафикРаботыСтруктура = Новый Структура;
		//2.1 Объявление перемнных
		ДатаСтр = Формат(РезультатЗапроса.Период, "ДЛФ=ДВ");
		ДеньНеделиСтр =  Формат(РезультатЗапроса.Период1, "ДФ=дддд");
		НачалоРаботыСтр = Формат(РезультатЗапроса.НачалоРаботы, "ДЛФ=В");
		КонецРаботыСтр = Формат(РезультатЗапроса.КонецРаботы, "ДЛФ=В");
		ВремяПриходаСтр = Формат(РезультатЗапроса.ВремяПрихода, "ДЛФ=В");
		ВремяУходаСтр = Формат(РезультатЗапроса.ВремяУхода, "ДЛФ=В");
		ОтработанноеВремяСтр = Формат(РезультатЗапроса.ОтработанноеВремя, "ДЛФ=В");
		ОпозданиеСтр = Формат (РезультатЗапроса.Опоздание, "ДЛФ=В");
		УходРаньшеВремениСтр = Формат( РезультатЗапроса.УходРаньшеВремени, "ДЛФ=В");
		
		ГрафикРаботыСтруктура.Вставить("Data",ДатаСтр);
		ГрафикРаботыСтруктура.Вставить("DayWeek",ДеньНеделиСтр);
		ГрафикРаботыСтруктура.Вставить("StartWorkDay",НачалоРаботыСтр);
		ГрафикРаботыСтруктура.Вставить("EndWorkDay",КонецРаботыСтр);
		ГрафикРаботыСтруктура.Вставить("ArrivalTime",ВремяПриходаСтр);
		ГрафикРаботыСтруктура.Вставить("CareTime",ВремяУходаСтр);
		ГрафикРаботыСтруктура.Вставить("WorkedTime",ОтработанноеВремяСтр);
		ГрафикРаботыСтруктура.Вставить("Tardiness",ОпозданиеСтр);
		ГрафикРаботыСтруктура.Вставить("CareBeforeTimePage",УходРаньшеВремениСтр);

		МассивГрафикРаботы.Добавить(ГрафикРаботыСтруктура);		
	КонецЦикла;
		//3. сериализуем массив клиентов в JSON
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, МассивГрафикРаботы);
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/JSON;  charset=utf-8");
	Ответ.Заголовки.Вставить("Access-Control-Allow-Headers", "Authorization,Content-type");
    Ответ.Заголовки.Вставить("Access-Control-Allow-Credentials", "true");
	Если Ложь Тогда 
		Запрос = Новый HTTPЗапрос; 
	КонецЕсли;
    Origin = Запрос.Заголовки.Получить("Origin");
    Если Origin = Неопределено Тогда
        Ответ.Заголовки.Вставить("Access-Control-Allow-Origin", "*");
    Иначе
        Ответ.Заголовки.Вставить("Access-Control-Allow-Origin", Origin);
    КонецЕсли;    
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Возврат Ответ
	

	
КонецФункции


Функция getTasksReactgetTask(Запрос)
	Логин =   Запрос.ПараметрыURL.Получить("user");
	
	
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиКомпании.Наименование КАК НаименованиеЗадачи,
		|	ЗадачиКомпании.Дата КАК ДатаСоздания,
		|	ЗадачиКомпании.Назначение КАК Назначение,
		|	ЗадачиКомпании.СтатусЗаявки КАК СтатусЗаявки,
		|	ЗадачиКомпании.ПриоритетЗадания КАК ПриоритетЗадания,
		|	ЗадачиКомпании.СложностьЗадания КАК СложностьЗадания,
		|	ЗадачиКомпании.ДатаИзменения КАК ДатаИзменения,
		|	ЗадачиКомпании.КоличествоЧасов КАК КоличествоЧасов,
		|	ЗадачиКомпании.СрокИсполнения КАК СрокИсполнения,
		|	ЗадачиКомпании.ДатаИсполнения КАК ДатаИсполнения,
		|	ЗадачиКомпании.КоличествоСдвинутыхСроков КАК КоличествоСдвинутыхСроков,
		|	ЗадачиКомпании.Исполнитель КАК Исполнитель,
		|	ЗадачиКомпании.Заказчик КАК Заказчик,
		|	ЗадачиКомпании.Подразделение КАК Подразделение,
		|	ЗадачиКомпании.Куратор КАК Куратор,
		|	ЗадачиКомпании.Куратор1 КАК Куратор1,
		|	ЗадачиКомпании.Куратор2 КАК Куратор2,
		|	ЗадачиКомпании.Куратор3 КАК Куратор3,
		|	ЗадачиКомпанииКомментарии.Дата КАК ДатаКомментария,
		|	ЗадачиКомпанииКомментарии.Автор КАК Автор,
		|	ЗадачиКомпанииКомментарии.Комментарий КАК Комментарий,
		|	ЗадачиКомпанииКомментарии.Наименование КАК НаименованиеКомментария
		|ИЗ
		|	Задача.ЗадачиКомпании.Комментарии КАК ЗадачиКомпанииКомментарии
		|		ПОЛНОЕ СОЕДИНЕНИЕ Задача.ЗадачиКомпании КАК ЗадачиКомпании
		|		ПО ЗадачиКомпанииКомментарии.Ссылка = ЗадачиКомпании.Ссылка
		|ГДЕ
		|	ЗадачиКомпании.Исполнитель.ФизЛицо.Наименование = &Логин";
	
	Запрос1.УстановитьПараметр("Логин", Логин);
	
	Результат = Запрос1.Выполнить();
	РезультатЗапроса = Результат.Выбрать();
	
	МассивЗадач = Новый Массив;
	Пока РезультатЗапроса Цикл
		
		СтруктураЗадач = Новый Структура;
		
		НаименованиеЗадачиСтр = ""+РезультатЗапроса.НаименованиеЗадачи;
		ДатаСозданияСтр = Формат(РезультатЗапроса.ДатаСоздания, "ДЛФ=ДВ");
		НазначениеСтр = ""+РезультатЗапроса.Назначение;
		СтатусЗаявкиСтр = ""+РезультатЗапроса.СтатусЗаявки;
		ПриоритетЗаданияСтр = ""+ РезультатЗапроса.ПриоритетЗадания;
		СложностьЗаданияСтр = "" + РезультатЗапроса.СложностьЗадания;
		ДатаИзмененияСтр = Формат(РезультатЗапроса.ДатаИзменения, "ДЛФ=ДВ");
		
		КоличествоЧасовСтр =  ""+ РезультатЗапроса.КоличествоЧасов;
		СрокИсполненияСтр = Формат(РезультатЗапроса.СрокИсполнения, "ДЛФ=ДВ");
		ДатаИсполненияСтр =  Формат(РезультатЗапроса.ДатаИсполнения, "ДЛФ=ДВ");
		КоличествоСдвинутыхСроковСтр= ""+ РезультатЗапроса.КоличествоСдвинутыхСроков;
		ИсполнительСтр =  ""+ РезультатЗапроса.Исполнитель;
		ЗаказчикСтр = ""+ РезультатЗапроса.Заказчик;
		ПодразделениеСтр = ""+ РезультатЗапроса.Подразделение;
		
		КураторСтр = ""+ РезультатЗапроса.Куратор;
		Куратор1Стр = ""+ РезультатЗапроса.Куратор1;
		Куратор2Стр = ""+ РезультатЗапроса.Куратор2;
		Куратор3Стр = ""+ РезультатЗапроса.Куратор3;
		ДатаКомментарияСтр=  Формат(РезультатЗапроса.ДатаКомментария, "ДЛФ=ДВ") ;
		АвторСтр  = ""+ РезультатЗапроса.Автор;
		КомментарийСтр = ""+ РезультатЗапроса.Комментарий;
		НаименованиеКомментарияСтр   = ""+ РезультатЗапроса.НаименованиеКомментария;
		
		СтруктураЗадач.Вставить("NameTasks", НаименованиеЗадачиСтр );
		СтруктураЗадач.Вставить("DateOfCreation", ДатаСозданияСтр);
		СтруктураЗадач.Вставить("Appointment", НазначениеСтр);
		СтруктураЗадач.Вставить("StatusApplications", СтатусЗаявкиСтр );
		СтруктураЗадач.Вставить("TaskPriority", ПриоритетЗаданияСтр );
		СтруктураЗадач.Вставить("ChallengeDifficulty",  СложностьЗаданияСтр);
		СтруктураЗадач.Вставить("DateOfChange", ДатаИзмененияСтр );
		
		СтруктураЗадач.Вставить("NumberoOfHours", КоличествоЧасовСтр );
		СтруктураЗадач.Вставить("PeriodOfExecution", СрокИсполненияСтр);
		СтруктураЗадач.Вставить("DataOfExecution", ДатаИсполненияСтр);
		СтруктураЗадач.Вставить("NumberOfShiftedTerms", КоличествоСдвинутыхСроковСтр);
		СтруктураЗадач.Вставить("Executor", ИсполнительСтр );
        СтруктураЗадач.Вставить("Customer",ЗаказчикСтр );
        СтруктураЗадач.Вставить("Subdivision", ПодразделениеСтр );
		
        СтруктураЗадач.Вставить("Curator", КураторСтр );
        СтруктураЗадач.Вставить("Curator1", Куратор1Стр );
        СтруктураЗадач.Вставить("Curator2", Куратор2Стр);
		СтруктураЗадач.Вставить("Curator3", Куратор3Стр);
		СтруктураЗадач.Вставить("DateComment",ДатаКомментарияСтр );
		СтруктураЗадач.Вставить("Author",АвторСтр );
		СтруктураЗадач.Вставить("Сomment", КомментарийСтр);
		СтруктураЗадач.Вставить("NameComment", НаименованиеКомментарияСтр);
		
		МассивЗадач.Добавить(СтруктураЗадач);
	КонецЦикла;
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, МассивЗадач);
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-type", "application/JSON;  charset=utf-8");
	Ответ.Заголовки.Вставить("Access-Control-Allow-Headers", "Authorization,Content-type");
    Ответ.Заголовки.Вставить("Access-Control-Allow-Credentials", "true");
	Если Ложь Тогда 
		Запрос = Новый HTTPЗапрос; 
	КонецЕсли;
    Origin = Запрос.Заголовки.Получить("Origin");
    Если Origin = Неопределено Тогда
        Ответ.Заголовки.Вставить("Access-Control-Allow-Origin", "*");
    Иначе
        Ответ.Заголовки.Вставить("Access-Control-Allow-Origin", Origin);
    КонецЕсли;    
	Ответ.УстановитьТелоИзСтроки(СтрокаДляОтвета, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Возврат Ответ;

	
КонецФункции


#endregion